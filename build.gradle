apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        applicationId "navdrawer.test.com.navigationdrawertest"
        minSdkVersion 17
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        // Enabling multidex support.
        multiDexEnabled true
        missingDimensionStrategy 'minApi', 'minApi18', 'minApi23'
        // You should specify a missingDimensionStrategy property for each
        // dimension that exists in a local dependency but not in your app.
        missingDimensionStrategy 'abi', 'x86', 'arm64'
    }

    applicationVariants.all { variant ->
        variant.getCompileConfiguration().resolutionStrategy {

        }
        variant.runtimeConfiguration.resolutionStrategy {

        }
        variant.getAnnotationProcessorConfiguration().resolutionStrategy {

        }
    }

    flavorDimensions 'tier'
    productFlavors {
        paid {
            dimension 'tier'
            // Because the dependency already includes a "paid" flavor in its
            // "tier" dimension, you don't need to provide a list of fallbacks
            // for the "paid" flavor.
        }
        free {
            dimension 'tier'
            // Specifies a sorted list of fallback flavors that the plugin
            // should try to use when a dependency's matching dimension does
            // not include a "free" flavor. You may specify as many
            // fallbacks as you like, and the plugin selects the first flavor
            // that's available in the dependency's "tier" dimension.
            missingDimensionStrategy 'minApi', 'minApi23', 'minApi18'
            matchingFallbacks = ['demo', 'trial']
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        staging {
            // Specifies a sorted list of fallback build types that the
            // plugin should try to use when a dependency does not include a
            // "staging" build type. You may specify as many fallbacks as you
            // like, and the plugin selects the first build type that's
            // available in the dependency.
            matchingFallbacks = ['debug', 'qa', 'release']
        }
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }

    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }


}

dependencies {
    //Volley Library - You need to add this line
    //noinspection GradleCompatible
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    implementation 'com.android.support:support-v4:27.1.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    // Dependency on local binaries
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    // Dependency on a remote binary
    implementation 'com.mcxiaoke.volley:library-aar:1.0.0'
    implementation 'com.google.android.gms:play-services:12.0.+'
    implementation 'com.squareup.picasso:picasso:2.5.2'
    implementation 'com.github.aakira:expandable-layout:1.4.2@aar'
    implementation 'com.astuetz:pagerslidingtabstrip:1.0.1'
    implementation 'com.nineoldandroids:library:2.4.0'
    implementation 'com.flaviofaria:kenburnsview:1.0.6'
    implementation 'com.android.support:multidex:1.0.1'
    implementation 'com.jakewharton.threetenabp:threetenabp:1.0.5'
    // Note: You can still use the exclude keyword to omit certain artifacts of
    // dependencies you add only to your test configurations.
    androidTestImplementation('org.threeten:threetenbp:1.3.3') {
        exclude group: 'com.jakewharton.threetenabp', module: 'threetenabp'
    }
    implementation project(':library')
    implementation files('libs/YouTubeAndroidPlayerApi.jar')
    implementation 'com.android.support:appcompat-v7:28.0.0-alpha3'
    implementation 'com.android.support:cardview-v7:28.0.0-alpha3'
    implementation 'com.android.support:recyclerview-v7:28.0.0-alpha3'
    implementation 'com.android.support:design:26.+'
    implementation 'com.squareup.picasso:picasso:2.5.1'
    // You can, however, keep using variant-specific configurations when
    // targeting external dependencies. The following line adds 'app-magic'
    // as a dependency to only the "debug" version of your module.
    implementation 'com.github.bumptech.glide:glide:4.8.0'
    annotationProcessor 'com.github.bumptech.glide:glide:4.8.0'
    implementation 'com.pierfrancescosoffritti.androidyoutubeplayer:core:8.0.1'
    implementation 'com.pierfrancescosoffritti.androidyoutubeplayer:chromecast-sender:0.15'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.2.50'
    // code generator for view
    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor "com.jakewharton:butterknife-compiler:8.8.1"
    implementation files('libs/YouTubeAndroidPlayerApi.jar')
}
